// Setting up Express.js to interact with MySQL database and handle API endpoint
import { createPool } from 'mysql2/promise';
import express from 'express';

const app = express();
app.use(express.json());

// Creating MySQL connection pool
const pool = createPool({
  host: 'localhost',
  user: 'Nafisa',
  password: '201812t',
  database: 'khojthesearch',
  port: 3306,
  connectionLimit: 10 
});

// API route to insert valuess with autogenerated user ID and timestamp and manually inserted input values
app.post('/api/insertUser', async (req, res) => {
  console.log('Insert user endpoint reached');
  
  emailInput, passwordInput, integers = req.body; 

  // Sort the comma seperated input values in descending order
  const sortedInputValues = integers.split(',').map(Number).sort((a, b) => b - a);
  const sortedInputValuesString = sortedInputValues.join(',');

  // For API endpoint response from the database query
  const { start_datetime, end_datetime, user_id } = req.query; 

  try {
    const connection = await pool.getConnection();

    // Inserts the values into the users table
    const userInsertQuery = 'INSERT INTO users (email, password) VALUES (?, ?)';
    const [userInsertResult] = await connection.execute(userInsertQuery, [email, password]);
    const userId = userInsertResult.insertId;

    // Catches current timestamp
    const timestamp = new Date().toISOString(); 

    // Insert the user ID, timestamp, and input values into the users table
    const inputValuesInsertQuery = 'INSERT INTO users (user_id, timestamp, input_values) VALUES (?, ?, ?)';
    await connection.execute(inputValuesInsertQuery, [userId, timestamp, sortedInputValuesString]);

    // To select start_time, end_time, user_id for API endpoint status from the database
    const query = `
      SELECT created_at, input_values
      FROM users
      WHERE user_id = ? AND created_at >= ? AND created_at <= ?
      ORDER BY created_at ASC;
    `;

    // Retrieves from the database for each row
    const [rows] = await connection.execute(query, [user_id, start_datetime, end_datetime]);

    connection.release();

    // Array holding the transformed timestamp and the input values from each row
    const responsePayload = rows.map(row => ({
      timestamp: row.created_at.toISOString(),
      input_values: row.input_values,
    }));

    console.log('Inserted new user:', user_id);

    // API endpoint receives this JSON response; the response format
    res.status(200).json({
      status: 'success',
      user_id: user_id,
      start_datetime: start_datetime,
      end_datetime: end_datetime,
      payload: responsePayload,
    });

  } catch (error) {
    console.error('Error inserting user:', error);
    res.status(500).json({ error: 'Error inserting user' });
  }
});

// Starts the server
const PORT = 3008; 
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
